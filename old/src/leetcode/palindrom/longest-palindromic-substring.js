/*
* Given a string S, find the longest palindromic substring in S.
 * You may assume that the maximum length of S is 1000,
 * and there exists one unique longest palindromic substring.
* */
//https://leetcode.com/problems/longest-palindromic-substring/
//var str = 'abaxabaxabb';
//var str = 'abb';
//var str = '0000000';
var str
var expectStr
//var expectStr = 'baxabaxab';
//var expectStr = 'bb';
//var expectStr = '0000000';
//var longestPalindrome = function(s) {
//    var result = '';
//    var newS = s.split('').join('#');//palindrom will be odd number a#b#b
//    //var newS = '';
//    var l, r;
//    var tempStr='';
//    //for(var i = 0; i < s.length; i++){
//    //    newS = newS + s[i] + '#';
//    //}
//
//    for(var i = 0; i < newS.length; i++){
//        tempStr = newS[i];
//        l = i-1;
//        r = i+1;
//        while(l>=0 && r<newS.length){
//            if(newS[l]!==newS[r])break;
//            tempStr = newS[l] + tempStr + newS[r];
//            l--;
//            r++;
//        }
//
//        if(result.replace(/#/g, '').length<tempStr.replace(/#/g,'').length)result=tempStr;
//    }
//    result = result.replace(/#/g, '');
//
//    console.log('result:' + result);
//    return result;
//};

//longestPalindrome(str);

//'use strict'
//require('babel-core/register')
//var Mocha = require('mocha');
//var expect = require('chai').expect;
//var mocha = new Mocha({ui: 'bdd'});
//mocha.suite.emit('pre-require', this, 'solution', mocha);
//
//describe("Balanced parentheses", () => {
//    it('it', function(){
//        expect(longestPalindrome(str)).to.equal(expectStr);
//    })
//
//});
var longestPalindrome = function(s) {
    var max, s1, s2, result;
    if(s.length === 0)return 0;
    max = 1;
    result = s.substr(0, 1);
    for(var i = 0; i < s.length; i++){
        s1 = expendPalindrome(s,i,i);
        s2 = expendPalindrome(s,i,i+1);
        if(s1.length > max){
            max = s1.length;
            result = s1;
        }
        if(s2.length > max){
            max = s2.length;
            result = s2;
        }
    }

    return result;
};

var expendPalindrome = function(s, c1, c2) {
    var l = c1, r = c2;

    while(l>=0 && r<=s.length-1 && s[l] === s[r]){
        l--;
        r++;
    }

    return s.substr(l+1, r-l-1);
};
//var str = 'abaxabaxabb';
console.log(longestPalindrome(str));
